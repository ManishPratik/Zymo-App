// Plugin management must be the first block in the file
pluginManagement {

    //OMAR: changes for the flutter plugin loader
    def flutterSdkPath = {
        def properties = new Properties()
        file("local.properties").withInputStream { properties.load(it) }
        def flutterSdkPath = properties.getProperty("flutter.sdk")
        assert flutterSdkPath != null, "flutter.sdk not set in local.properties"
        return flutterSdkPath
    }()

    includeBuild("$flutterSdkPath/packages/flutter_tools/gradle")

    repositories {
        google()
        jcenter()
        mavenCentral()
        gradlePluginPortal()
    }

    resolutionStrategy {
        eachPlugin {
            // Kotlin plugin
            if (requested.id.id == "org.jetbrains.kotlin.jvm" || requested.id.id == "org.jetbrains.kotlin.android") {
                useVersion("2.1.0") // Use the latest stable Kotlin version
            }
            // Android Gradle plugin
            if (requested.id.id == "com.android.application" || requested.id.id == "com.android.library") {
                useVersion("8.3.0") // Use the latest stable Android Gradle plugin version
            }
        }
    }
}

//OMAR: changes for the flutter plugin loader
plugins {
    id "dev.flutter.flutter-plugin-loader" version "1.0.0" // apply true
    id "com.android.application" version "8.3.1" apply false
    id "org.jetbrains.kotlin.android" version "2.1.0" apply false
    id "com.google.gms.google-services" version "4.3.5" apply false
    id "com.google.firebase.crashlytics" version "2.9.9" apply false
}

// Dependency resolution management

// Include the app module
include ':app'

//OMAR: commenting the whole below to test

// Load local.properties file
def localPropertiesFile = new File(rootProject.projectDir, "local.properties")
def properties = new Properties()

if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader -> properties.load(reader) }
}

// Get Flutter SDK path from local.properties
def flutterSdkPath = properties.getProperty("flutter.sdk")
if (flutterSdkPath == null) {
    throw new GradleException("flutter.sdk not set in local.properties. Make sure to define the Flutter SDK path in local.properties.")
}

// Apply Flutter plugin loader
//apply from: "$flutterSdkPath/packages/flutter_tools/gradle/app_plugin_loader.gradle"


